---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/Base.astro";
import "github-markdown-css/github-markdown-light.css";

export async function getStaticPaths() {
  const blogEntries = await getCollection("guideline");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

export const prerender = true;

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
---

<BaseLayout>
  <div w-bg-gray-100 w-min-h-full>
    <div w-max-w-screen-xl w-w-full w-mx-auto w-my-8 w-flex w-flex-row>
      <div class="content" w-flex-1 lg:w-mr-8 w-bg-white>
        <div class="markdown-body" w-p-10>
          <Content />
        </div>
      </div>
      <div class="sidebar" w-w-96 w-hidden lg:w-block>
        <div
          id="toc"
          class="toc"
          w-bg-white
          w-p-10
          w-h-min
          w-text-base
          w-sticky
          w-right-0
        >
          {
            headings &&
              headings.map(({ depth, slug, text }) => {
                if (depth === 2) {
                  return (
                    <a href={`#${slug}`} w-mb-2>
                      {text}
                    </a>
                  );
                }
                if (depth === 3) {
                  return (
                    <a href={`#${slug}`} w-mb-2 w-pl-3>
                      {text}
                    </a>
                  );
                }
              })
          }
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- TODO: Implemented using tailwind -->
<style>
  .toc {
    top: calc(106px + 2rem);
  }
  .toc .active {
    color: blue;
  }
  .toc a {
    display: block;
  }
</style>

<script>
  const headerHeight = document.querySelector("header")?.offsetHeight || 100;

  const scrollToTarget = () => {
    const hash = window.location.hash;
    const targetId = hash.slice(1);
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      window.scrollTo({
        top: targetElement.offsetTop - headerHeight - 20,
        behavior: "auto",
      });
    }
  };

  window.addEventListener("load", scrollToTarget);
  window.addEventListener("hashchange", scrollToTarget);

  const headings = document.querySelectorAll("h2, h3");
  const visibaleHeadings: Element[] = [];
  const tocContainer = document.getElementById("toc");
  const tocElements = Array.from(tocContainer?.children || []);

  headings.forEach((heading) => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            visibaleHeadings.push(heading);
          } else {
            const index = visibaleHeadings.indexOf(heading);
            if (index !== -1) {
              visibaleHeadings.splice(index, 1);
            }
          }
        });

        const closestVisibleHeading = visibaleHeadings.sort(
          (a, b) =>
            a.getBoundingClientRect().top - b.getBoundingClientRect().top
        )[0];

        if (closestVisibleHeading) {
          const targetId = closestVisibleHeading.id;
          const targetElement = document.querySelector(
            `a[href="#${targetId}"]`
          );

          tocElements.forEach((element) => {
            element.classList.remove("active");
          });

          targetElement?.classList.add("active");
        }
      },
      {
        threshold: 1.0,
      }
    );

    observer.observe(heading);
  });
</script>
